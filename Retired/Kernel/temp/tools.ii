# 1 "tools.cpp"
# 1 "/home/colin/Development/OSdevelopment/Kernel/Kernel/temp//"
# 1 "<command-line>"
# 1 "tools.cpp"
# 1 "tools.h" 1







# 1 "/usr/lib/gcc/x86_64-unknown-linux-gnu/4.7.1/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-unknown-linux-gnu/4.7.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 102 "/usr/lib/gcc/x86_64-unknown-linux-gnu/4.7.1/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 9 "tools.h" 2


class CStringPrint
{
public:
 CStringPrint();
 virtual ~CStringPrint();

 void Print(const char *format, ...);
 void PrintList(const char *format, va_list &params);

 static bool IsDigit(char c);
 static int LengthOf(const char *s);

protected:
 virtual void PrintOut(const char *data, int length) = 0;

private:
 int ParseFormat(va_list &params, const char *format);
};



static __inline__ void outb(unsigned short port, unsigned char val)
{
   asm volatile("outb %0,%1"::"a"(val), "Nd" (port));
}

static __inline__ void outw(unsigned short port, unsigned short val)
{
   asm volatile("outw %0,%1"::"a"(val), "Nd" (port));
}

static __inline__ void outl(unsigned short port, unsigned int val)
{
   asm volatile("outl %0,%1"::"a"(val), "Nd" (port));
}

static __inline__ unsigned char inb(unsigned short port)
{
   unsigned char ret;
   asm volatile ("inb %1,%0":"=a"(ret):"Nd"(port));
   return ret;
}

static __inline__ unsigned short inw(unsigned short port)
{
   unsigned short ret;
   asm volatile ("inw %1,%0":"=a"(ret):"Nd"(port));
   return ret;
}

static __inline__ unsigned int inl(unsigned short port)
{
   unsigned int ret;
   asm volatile ("inl %1,%0":"=a"(ret):"Nd"(port));
   return ret;
}
# 75 "tools.h"
static __inline__ void io_wait(void)
{
   asm volatile("outb %%al, $0x80" : : "a"(0));


}
# 2 "tools.cpp" 2
# 1 "debug.h" 1





void InitDebug(void);

void kcls(void);
void kprintf(const char *format, ...);
void test(char c);
# 3 "tools.cpp" 2



CStringPrint::CStringPrint()
{

}

CStringPrint::~CStringPrint()
{

}

void CStringPrint::Print(const char *format, ...)
{
 va_list vl;

 __builtin_va_start(vl,format);
 PrintList(format, vl);
 __builtin_va_end(vl);
}

void CStringPrint::PrintList(const char *format, va_list &params)
{
 int i;

 if (!(format != ((void*)0))) kprintf("ASSERTION FAILURE (%s:%i): %s\n", "tools.cpp", 29, "format != NULL");

 for (i = 0; format[i] != '\0';)
 {
  if (format[i] == '%')
  {
   i += ParseFormat(params, format + i + 1) + 1;
  }
  else
  {
   PrintOut(format + (i++), 1);
  }
 }
}

int CStringPrint::ParseFormat(va_list &params, const char *format)
{
 int index;
 bool added;

 int padding = 0;

 index = 0;
 added = false;
 do {
  switch (format[index])
  {

   case '.':
    index++;
    while (IsDigit(format[index]))
    {
     padding *= 10;
     padding += format[index] - '0';
     index++;
    }
    break;


   case 'i':
    {
     int x = __builtin_va_arg(params,int);
     char buf[32];
     int i;

     i = 32;
     if (x == 0)
      buf[--i] = '0';
     while (x != 0)
     {
      buf[--i] = "0123456789ABCDEF"[x % 10];
      x /= 10;
     }
     padding -= 32 - i;
     while (padding > 0)
     {
      PrintOut("0", 1);
      padding--;
     }
     PrintOut(buf + i, 32 - i);
    }
    index++;
    added = true;
    break;
   case 'x':
    {
     unsigned int x = __builtin_va_arg(params,unsigned int);
     char buf[32];
     int i;

     i = 32;
     if (x == 0)
      buf[--i] = '0';
     while (x != 0)
     {
      buf[--i] = "0123456789ABCDEF"[x & 0x0F];
      x >>= 4;
     }
     padding -= 32 - i;
     while (padding > 0)
     {
      PrintOut("0", 1);
      padding--;
     }
     PrintOut(buf + i, 32 - i);
    }
    index++;
    added = true;
    break;
   case 's':
    {
     char *s = __builtin_va_arg(params,char*);
     int len = LengthOf(s);
     padding -= len;
     while (padding > 0)
     {
      PrintOut(" ", 1);
      padding--;
     }
     PrintOut(s, LengthOf(s));
    }
    index++;
    added = true;
    break;
   case '%':
    PrintOut("%", 1);
    index++;
    added = true;
    break;


   default:
    PrintOut("%", 1);
    added = true;
    break;
  }
 } while (!added);
 return index;
}

bool CStringPrint::IsDigit(char c)
{
 return ((c >= '0') && (c <= '9'));
}

int CStringPrint::LengthOf(const char *s)
{
 int i;
 for (i = 0; s[i] != '\0'; i++);
 return i;
}
